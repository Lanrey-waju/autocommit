package cli

import (
	"errors"
	"fmt"
	"log"
	"strconv"

	"github.com/AlecAivazis/survey/v2"
	"github.com/christian-gama/autocommit/chat"
)

type configAnswers struct {
	Model        string
	OpenAIAPIKey string
	Temperature  float32
}

func printWelcome() {
	fmt.Println("Welcome to AutoCommit! Let's get started by setting up your configuration.")
	fmt.Println("You can reset these settings later by running 'autocommit reset'.")
	fmt.Println("")
}

func askUserForConfig() *configAnswers {
	printWelcome()

	openaiApiKeyPrompt := survey.Password{
		Message: "OpenAI API Key",
		Help:    "The API key to use for OpenAI. Get one at https://platform.openai.com/account/api-keys",
	}

	modelPrompt := createModelPrompt()

	temperaturePrompt := survey.Input{
		Message: "Temperature",
		Help:    "Temperature refers to a parameter that controls the randomness of the output generated by the model.",
		Default: "0.3",
	}

	var answers configAnswers

	err := survey.Ask([]*survey.Question{
		{Name: "OpenAIAPIKey", Prompt: &openaiApiKeyPrompt, Validate: validateAPIKey},
		{Name: "Model", Prompt: &modelPrompt, Validate: survey.Required},
		{Name: "Temperature", Prompt: &temperaturePrompt, Transform: convertToFloat32, Validate: validateTemperature},
	}, &answers)
	if err != nil {
		log.Fatalf("Failed to get config input: %v", err)
	}

	return &answers
}

func createModelPrompt() survey.Select {
	models := []string{}
	for model := range chat.ModelMap {
		models = append(models, model)
	}

	return survey.Select{
		Message: "Model name",
		Help:    "A model can be an algorithm or a set of algorithms that have been trained on data to make predictions or decisions.",
		Default: chat.GPT3Dot5Turbo16k,
		Options: models,
		Description: func(value string, index int) string {
			if value == chat.GPT4 || value == chat.GPT432K {
				return "Beta - May not be available for all users"
			}

			return ""
		},
		VimMode: true,
	}
}

func convertToFloat32(ans any) any {
	value, err := strconv.ParseFloat(ans.(string), 32)
	if err != nil {
		return float32(0.28)
	}
	return float32(value)
}

func validateTemperature(ans any) error {
	value, err := strconv.ParseFloat(ans.(string), 32)
	if err != nil {
		return fmt.Errorf("temperature must be a number")
	}
	if value <= 0 || value > 1 {
		return fmt.Errorf("temperature must be greater than 0 and less than or equal to 1")
	}
	return nil
}

func validateAPIKey(ans any) error {
	if ans.(string) == "" {
		return errors.New("API key cannot be empty")
	}

	// Can be any model, the point is to check if the API key is valid
	err := chat.ValidateAPIKey(ans.(string))
	if err != nil {
		return err
	}

	return nil
}
